---
import Loader from './Loader.astro';

export interface Props {
  id?: string;
  maxFiles?: number;
  maxSizePerFile?: number;
}

const { 
  id = 'file-upload',
  maxFiles = 50,
  maxSizePerFile = 50 * 1024 * 1024 // 50MB
} = Astro.props;
---

<div class="file-upload-container">
  <div class="upload-area" id={id}>
    <svg class="upload-icon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
    </svg>
    
    <h3 class="upload-title">Drop your lab results here</h3>
    
    <p class="upload-subtitle">PDF or images • Up to {maxFiles} files</p>
    
    <input 
      type="file" 
      id={`${id}-input`} 
      accept=".pdf,image/png,image/jpeg,image/jpg,image/webp,image/heic,image/heif" 
      class="hidden" 
      multiple
    />
    
    <div class="upload-features">
      <span>Anonymous</span>
      <span class="separator">•</span>
      <span>HIPAA-compliant</span>
      <span class="separator">•</span>
      <span>Zero Data Retention</span>
    </div>
  </div>

  <!-- File list -->
  <div id={`${id}-file-list`} class="file-list hidden"></div>
  
  <!-- File count -->
  <div id={`${id}-file-count`} class="file-count hidden"></div>
  
  <!-- Upload button -->
  <button id={`${id}-upload-btn`} class="btn btn-primary btn-block hidden" type="button">
    Upload your labs — free & private
  </button>
  
  <!-- Microcopy below button -->
  <p id={`${id}-microcopy`} class="upload-microcopy hidden">
    No signup required. Your data vanishes when you close this page.
  </p>
  
  <!-- Loading spinner -->
  <div id={`${id}-loading`} class="loading-container hidden">
    <Loader text="Processing your lab results..." />
  </div>
</div>

<style>
  .file-upload-container {
    width: 100%;
    max-width: 600px;
    margin: 0 auto;
    padding: 0 1rem;
    box-sizing: border-box;
  }

  .upload-area {
    border: 2px dashed #d1d5db;
    border-radius: 16px;
    padding: 3rem 1.5rem;
    text-align: center;
    background: #fafafa;
    cursor: pointer;
    transition: none;
  }
  
  .upload-area.transitions-ready {
    transition: all 0.3s ease;
  }

  @media (min-width: 640px) {
    .upload-area {
      padding: 4rem 3rem;
    }
  }

  .upload-area:hover {
    border-color: #2563eb;
    background: #f0f7ff;
    box-shadow: 0 4px 6px -1px rgba(37, 99, 235, 0.1), 0 2px 4px -1px rgba(37, 99, 235, 0.06);
  }
  
  .upload-area:hover .upload-icon {
    color: #2563eb;
  }
  
  .upload-area:hover .upload-title {
    color: #2563eb;
  }

  .upload-area.dragover {
    border-color: #3b82f6;
    background: #eff6ff;
  }

  .upload-icon {
    width: 48px;
    height: 48px;
    margin: 0 auto 1.5rem;
    color: #9ca3af;
    transition: color 0.3s ease;
  }

  @media (min-width: 640px) {
    .upload-icon {
      width: 56px;
      height: 56px;
    }
  }

  .upload-title {
    font-size: 1.125rem;
    font-weight: 600;
    color: #111827;
    margin-bottom: 0.5rem;
    transition: color 0.3s ease;
  }

  @media (min-width: 640px) {
    .upload-title {
      font-size: 1.375rem;
    }
  }

  .upload-subtitle {
    color: #6b7280;
    margin-bottom: 2rem;
    font-size: 0.875rem;
  }

  @media (min-width: 640px) {
    .upload-subtitle {
      font-size: 1rem;
    }
  }

  .upload-features {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    gap: 0.5rem;
    color: #9ca3af;
    font-size: 0.813rem;
    margin-top: 2rem;
  }

  @media (min-width: 640px) {
    .upload-features {
      flex-direction: row;
      gap: 0.75rem;
      font-size: 0.875rem;
    }
  }

  .separator {
    display: none;
    color: #d1d5db;
    margin: 0 0.25rem;
  }

  @media (min-width: 640px) {
    .separator {
      display: inline;
    }
  }

  .file-list {
    margin-top: 1rem;
    border: 1px solid #e5e7eb;
    border-radius: 8px;
    max-height: 240px; /* Approximately 5 rows */
    overflow-y: auto;
  }

  .file-table {
    font-family: 'Courier New', Courier, monospace;
  }

  .file-table td {
    font-size: 0.875rem;
    padding: 0.75rem 1rem;
  }

  .file-count {
    margin-top: 0.5rem;
    font-size: 0.875rem;
    color: #6b7280;
    text-align: center;
  }

  .btn-block {
    width: 100%;
    margin-top: 1rem;
  }

  .upload-microcopy {
    margin-top: 0.75rem;
    margin-bottom: 5rem; /* Added comfortable padding below microcopy */
    font-size: 0.875rem;
    color: #6b7280;
    text-align: center;
  }

  .loading-container {
    margin-top: 2rem;
  }

  .hidden {
    display: none;
  }
</style>

<script is:inline define:vars={{ id, maxFiles, maxSizePerFile }}>
  function initFileUpload(id, maxFiles, maxSizePerFile) {
    const uploadArea = document.getElementById(id);
    const fileInput = document.getElementById(`${id}-input`);
    const fileList = document.getElementById(`${id}-file-list`);
    const fileCount = document.getElementById(`${id}-file-count`);
    const uploadBtn = document.getElementById(`${id}-upload-btn`);
    const uploadMicrocopy = document.getElementById(`${id}-microcopy`);
    const loadingContainer = document.getElementById(`${id}-loading`);
    
    if (!uploadArea || !fileInput || !fileList || !fileCount || !uploadBtn || !loadingContainer) return;
    
    let selectedFiles = [];

    // Enable transitions after initial render
    setTimeout(() => {
      uploadArea.classList.add('transitions-ready');
    }, 100);

    uploadArea.addEventListener('click', () => {
      fileInput.click();
    });

    uploadArea.addEventListener('dragover', (e) => {
      e.preventDefault();
      uploadArea.classList.add('dragover');
    });

    uploadArea.addEventListener('dragleave', () => {
      uploadArea.classList.remove('dragover');
    });

    uploadArea.addEventListener('drop', (e) => {
      e.preventDefault();
      uploadArea.classList.remove('dragover');
      
      const files = e.dataTransfer?.files;
      if (files && files.length > 0) {
        handleFiles(files);
      }
    });

    fileInput.addEventListener('change', () => {
      if (fileInput.files && fileInput.files.length > 0) {
        handleFiles(fileInput.files);
      }
    });

    function handleFiles(files) {
      const validTypes = [
        'application/pdf',
        'image/png',
        'image/jpeg',
        'image/jpg',
        'image/webp',
        'image/heic',
        'image/heif'
      ];
      const newFiles = [];

      for (let i = 0; i < files.length; i++) {
        const file = files[i];
        
        // Validate file type
        if (!validTypes.includes(file.type)) {
          alert(`${file.name} is not a valid file type. Please upload PDF or image files.`);
          continue;
        }

        // Validate file size
        if (file.size > maxSizePerFile) {
          alert(`${file.name} exceeds the maximum size of ${maxSizePerFile / (1024 * 1024)}MB.`);
          continue;
        }

        // Check max files limit
        if (selectedFiles.length + newFiles.length >= maxFiles) {
          alert(`Maximum ${maxFiles} files allowed.`);
          break;
        }

        newFiles.push(file);
      }

      if (newFiles.length > 0) {
        selectedFiles = [...selectedFiles, ...newFiles];
        updateFileList();
      }
    }

    function updateFileList() {
      if (selectedFiles.length === 0) {
        fileList.classList.add('hidden');
        fileCount.classList.add('hidden');
        uploadBtn.classList.add('hidden');
        uploadMicrocopy.classList.add('hidden');
        return;
      }

      fileList.classList.remove('hidden');
      fileCount.classList.remove('hidden');
      uploadBtn.classList.remove('hidden');
      uploadMicrocopy.classList.remove('hidden');

      // Create table using DOM methods to avoid XSS
      const table = document.createElement('table');
      table.className = 'table table-zebra file-table';
      const tbody = document.createElement('tbody');
      
      selectedFiles.forEach(file => {
        const tr = document.createElement('tr');
        const td1 = document.createElement('td');
        const td2 = document.createElement('td');
        
        td1.textContent = file.name; // Safe - textContent automatically escapes
        td2.className = 'text-right';
        td2.textContent = formatFileSize(file.size);
        
        tr.appendChild(td1);
        tr.appendChild(td2);
        tbody.appendChild(tr);
      });
      
      table.appendChild(tbody);
      fileList.innerHTML = ''; // Clear existing content
      fileList.appendChild(table);
      
      // Update file count
      const fileText = selectedFiles.length === 1 ? 'file' : 'files';
      fileCount.textContent = `${selectedFiles.length} ${fileText} selected`;

      // Scroll the upload area to align with top of Sign Up button
      const yOffset = -16; // Small offset to align with top of Sign Up button (1rem = 16px)
      const element = uploadArea;
      const y = element.getBoundingClientRect().top + window.pageYOffset + yOffset;
      window.scrollTo({ top: y, behavior: 'smooth' });
    }

    function formatFileSize(bytes) {
      if (bytes < 1024) return bytes + ' B';
      if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(1) + ' KB';
      return (bytes / (1024 * 1024)).toFixed(1) + ' MB';
    }

    uploadBtn.addEventListener('click', async () => {
      if (selectedFiles.length === 0) return;

      uploadBtn.disabled = true;
      uploadBtn.textContent = 'Processing...';
      loadingContainer.classList.remove('hidden');
      uploadArea.classList.add('hidden');
      fileList.classList.add('hidden');
      uploadBtn.classList.add('hidden');
      uploadMicrocopy.classList.add('hidden');
      
      // Scroll to top when processing starts (instant)
      window.scrollTo({ top: 0 });

      try {
        // Convert files to base64
        const fileData = await Promise.all(selectedFiles.map(async (file) => {
          const content = await fileToBase64(file);
          return {
            filename: file.name,
            content: content.split(',')[1], // Remove data:type;base64, prefix
            mimeType: file.type
          };
        }));

        // Send to API (Cloudflare Worker)
        const response = await fetch('/api/extract-labs', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            files: fileData,
            requestId: generateRequestId(),
            timestamp: Date.now()
          })
        });

        if (!response.ok) {
          const errorData = await response.json();
          
          // Handle rate limiting specifically
          if (response.status === 429) {
            const retryAfter = errorData.retryAfter || 60;
            throw new Error(`Too many requests. Please wait ${retryAfter} seconds and try again.`);
          }
          
          throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        
        // Dispatch custom event with results
        window.dispatchEvent(new CustomEvent('lab-results', { 
          detail: data 
        }));

        // Hide the entire file upload container after successful processing
        const uploadContainer = document.querySelector('.file-upload-container');
        if (uploadContainer) {
          uploadContainer.classList.add('hidden');
        }

        // Reset form
        selectedFiles = [];
        updateFileList();
        uploadBtn.textContent = 'Upload your labs — free & private';
        loadingContainer.classList.add('hidden');
        uploadArea.classList.remove('hidden');
      } catch (error) {
        console.error('Upload error:', error);
        
        // Create user-friendly error message
        let errorMessage = 'Failed to process files';
        if (error.message.includes('Too many requests')) {
          errorMessage = error.message;
        } else if (error.message) {
          errorMessage = `Failed to process files: ${error.message}`;
        }
        
        // Show error with better UX
        showErrorMessage(errorMessage);
        
        uploadBtn.textContent = 'Upload your labs — free & private';
        loadingContainer.classList.add('hidden');
        uploadArea.classList.remove('hidden');
        fileList.classList.remove('hidden');
        uploadBtn.classList.remove('hidden');
        uploadMicrocopy.classList.remove('hidden');
      } finally {
        uploadBtn.disabled = false;
      }
    });

    function fileToBase64(file) {
      return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onload = () => resolve(reader.result);
        reader.onerror = error => reject(error);
      });
    }

    function generateRequestId() {
      return `req_${Date.now()}_${Math.random().toString(36).substring(2, 11)}`;
    }
    
    function showErrorMessage(message) {
      // Create error element if it doesn't exist
      let errorEl = document.getElementById(`${id}-error`);
      if (!errorEl) {
        errorEl = document.createElement('div');
        errorEl.id = `${id}-error`;
        errorEl.className = 'error-message';
        errorEl.style.cssText = `
          background: #fef2f2;
          border: 1px solid #fecaca;
          color: #991b1b;
          padding: 1rem;
          border-radius: 8px;
          margin: 1rem 0;
          text-align: center;
          font-size: 0.875rem;
        `;
        uploadArea.parentNode.insertBefore(errorEl, uploadArea.nextSibling);
      }
      
      errorEl.textContent = message;
      errorEl.style.display = 'block';
      
      // Auto-hide after 10 seconds for non-rate-limit errors
      if (!message.includes('Too many requests')) {
        setTimeout(() => {
          errorEl.style.display = 'none';
        }, 10000);
      }
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    initFileUpload(id, maxFiles, maxSizePerFile);
  });
</script>