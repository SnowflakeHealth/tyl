---
import ShoppingLayout from '../../layouts/ShoppingLayout.astro';
---

<ShoppingLayout title="Find Lab Locations - Track Your Labs" description="Find convenient lab testing locations near you. Schedule appointments for blood work and diagnostic tests at nearby clinics.">
  <link href='https://api.mapbox.com/mapbox-gl-js/v3.1.0/mapbox-gl.css' rel='stylesheet' />
  <script src='https://api.mapbox.com/mapbox-gl-js/v3.1.0/mapbox-gl.js'></script>
  
  <div class="container mx-auto px-4 py-8 max-w-7xl">
    <!-- Header -->
    <div class="mb-6">
      <h1 class="text-4xl font-bold text-gray-900">Schedule Your Lab Test</h1>
    </div>

    <!-- Step Indicator -->
    <ul class="steps steps-horizontal w-full mb-8">
      <li class="step step-primary" data-step="location">
        <span class="text-sm font-medium">Select Location</span>
      </li>
      <li class="step" data-step="datetime">
        <span class="text-sm font-medium">Choose Date & Time</span>
      </li>
      <li class="step" data-step="confirm">
        <span class="text-sm font-medium">Select Appointment</span>
      </li>
    </ul>

    <!-- Location Selection Step -->
    <div id="location-step" class="step-content">
      <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <!-- Left Section - Location List (2/3 width on desktop) -->
        <div class="lg:col-span-2">
          <div class="card bg-base-100 border-2 border-gray-300 h-full">
            <div class="card-body">
              <!-- Search Section -->
              <div class="mb-4 relative">
                <h2 class="text-xl font-semibold mb-3">Search for Lab Locations</h2>
                <div class="flex gap-2 mb-3">
                  <div class="relative flex-1">
                    <input 
                      type="text" 
                      id="location-search" 
                      placeholder="Enter address, city, or ZIP code" 
                      class="input input-bordered w-full pr-10"
                    />
                    <div id="search-loading" class="absolute right-3 top-1/2 transform -translate-y-1/2 hidden">
                      <span class="loading loading-spinner loading-sm"></span>
                    </div>
                  </div>
                  <button id="search-btn" class="btn btn-primary">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                    </svg>
                    Search
                  </button>
                </div>
                
                <!-- Search Suggestions Dropdown -->
                <div id="search-suggestions" class="hidden absolute z-10 w-full bg-base-100 shadow-lg rounded-md border border-base-300 max-h-60 overflow-y-auto">
                  <!-- Suggestions will be populated here -->
                </div>
              </div>

              <!-- Location List -->
              <div id="location-list" class="space-y-2 overflow-y-auto" style="height: 350px">
                <!-- Loading skeleton -->
                <div class="loading-skeleton">
                  <div class="skeleton h-20 w-full mb-2"></div>
                  <div class="skeleton h-20 w-full mb-2"></div>
                  <div class="skeleton h-20 w-full mb-2"></div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Right Section - Map (1/3 width on desktop) -->
        <div class="lg:col-span-1">
          <div class="card bg-base-100 border-2 border-gray-300">
            <div class="card-body p-4">
              <h3 class="text-lg font-semibold mb-2">Map View</h3>
              
              <!-- Map Container -->
              <div id="map" class="w-full h-[320px] rounded-lg mb-3"></div>
              
              <!-- Map Controls -->
              <div class="mb-3">
                <button id="update-map" class="btn btn-block">
                  <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                  </svg>
                  Update Map
                </button>
              </div>

              <!-- Continue Button -->
              <button id="continue-to-datetime" class="btn btn-primary btn-block" disabled>
                Continue
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Date/Time Selection Step (Initially Hidden) -->
    <div id="datetime-step" class="step-content hidden">
      <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <!-- Left Section - Date & Time Selection (2/3 width) -->
        <div class="lg:col-span-2">
          <div class="card bg-base-100 border-2 border-gray-300">
            <div class="card-body">
              <h2 class="text-xl font-semibold mb-4">Select Date & Time</h2>

              <!-- Date Selection -->
              <div class="mb-6">
                <h3 class="text-lg font-medium mb-3">Available Dates</h3>
                <div id="date-picker" class="grid grid-cols-7 gap-2">
                  <!-- Dates will be populated here -->
                </div>
              </div>

              <!-- Time Slot Selection -->
              <div>
                <h3 class="text-lg font-medium mb-3">
                  Available Times <span id="selected-date-display" class="text-sm text-gray-600"></span>
                </h3>
                <div id="time-slots" class="grid grid-cols-3 md:grid-cols-4 gap-2">
                  <!-- Time slots will be populated here -->
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Right Section - Appointment Summary (1/3 width) -->
        <div class="lg:col-span-1">
          <div class="card bg-base-100 border-2 border-gray-300">
            <div class="card-body">
              <h3 class="text-lg font-semibold mb-4">Appointment Summary</h3>
              
              <div class="space-y-3">
                <div>
                  <p class="text-sm text-gray-600">Location</p>
                  <p class="font-medium" id="summary-location-name"></p>
                  <p class="text-sm" id="summary-location-address"></p>
                </div>
                
                <div>
                  <p class="text-sm text-gray-600">Date</p>
                  <p class="font-medium" id="summary-date">Not selected</p>
                </div>
                
                <div>
                  <p class="text-sm text-gray-600">Time</p>
                  <p class="font-medium" id="summary-time">Not selected</p>
                </div>
              </div>

              <div class="divider"></div>

              <!-- Navigation Buttons -->
              <div class="space-y-2">
                <button id="back-to-location" class="btn btn-outline btn-block">
                  Back to Location Selection
                </button>
                <button id="confirm-appointment" class="btn btn-primary btn-block" disabled>
                  Select Appointment
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</ShoppingLayout>

<script>
  // Wait for Mapbox to be available from CDN
  declare const mapboxgl: any;

  window.addEventListener('load', () => {
    // Initialize Mapbox with dev token
    mapboxgl.accessToken = 'pk.eyJ1IjoiZXJpYy1zbm93Zmxha2UiLCJhIjoiY21lZGVhOGhzMDkzaTJrb2V4aHZtNDhjciJ9.1XK2TsB05o6FqoqcR8haxw';

    // State management
    // Step tracking handled by showStep function
    let map: any;
    let labMarkers: any[] = [];
    let selectedLocation: any = null;
    let locations: any[] = [];
    let selectedDate: string | null = null;
    let selectedTimeSlot: any = null;
    let userCoordinates = { latitude: 41.8781, longitude: -87.6298 }; // Default Chicago
    // Search location no longer tracked separately
    let searchTimeout: any = null;
    let searchController: AbortController | null = null;
    
    // Initialize map
    try {
      map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/mapbox/streets-v12',
        center: [userCoordinates.longitude, userCoordinates.latitude],
        zoom: 10
      });

      // Add navigation controls
      map.addControl(new mapboxgl.NavigationControl(), 'top-right');
    } catch (error) {
      console.error('Error initializing map:', error);
    }

    // Step management
    function showStep(step: string) {
      // Step transition
      
      // Update step indicators
      document.querySelectorAll('.step').forEach(el => {
        const stepName = el.getAttribute('data-step');
        if (stepName === step) {
          el.classList.add('step-primary');
        } else if (stepName && ['location', 'datetime', 'confirm'].indexOf(stepName) < ['location', 'datetime', 'confirm'].indexOf(step)) {
          el.classList.add('step-primary');
        } else {
          el.classList.remove('step-primary');
        }
      });
      
      // Show/hide step content
      document.getElementById('location-step')?.classList.toggle('hidden', step !== 'location');
      document.getElementById('datetime-step')?.classList.toggle('hidden', step !== 'datetime');
    }

    // Fetch lab locations
    async function fetchLabLocations(zipCode?: string, _searchQuery?: string, skipMapUpdate?: boolean) {
      const locationList = document.getElementById('location-list');
      if (!locationList) return;
      
      // Show loading state
      locationList.innerHTML = `
        <div class="flex justify-center py-4">
          <span class="loading loading-spinner loading-md"></span>
        </div>
      `;
      
      try {
        // Check if we're in dev mode (localhost)
        const isDevMode = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';
        
        // Use provided ZIP or Austin ZIP for dev mode
        const requestBody = zipCode 
          ? { zipCode, city: '', state: '' }
          : isDevMode 
            ? { zipCode: '78723', city: 'Austin', state: 'TX', latitude: 30.2747, longitude: -97.6989 }
            : { latitude: userCoordinates.latitude, longitude: userCoordinates.longitude };
        
        const response = await fetch('/api/lab-locations', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(requestBody)
        });
        
        const data = await response.json();
        
        if (data.userLocation) {
          const { latitude, longitude } = data.userLocation;
          userCoordinates = { latitude, longitude };
          
          // Store search info
          // Search location tracked in UI directly
          
          // Only update map if not skipping (e.g., when using Update Map button)
          if (!skipMapUpdate) {
            // Jump to user location instantly
            map.jumpTo({
              center: [longitude, latitude],
              zoom: 10
            });
            
            // Add user location marker
            new mapboxgl.Marker({ color: '#3B82F6' })
              .setLngLat([longitude, latitude])
              .addTo(map);
          }
        }
        
        // Process and display locations
        locations = data.locations || [];
        displayLocations(locations, skipMapUpdate);
        
      } catch (error) {
        console.error('Error fetching locations:', error);
        locationList.innerHTML = `
          <div class="alert alert-error">
            <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>
            <span>Error loading locations. Please try again.</span>
          </div>
        `;
      }
    }

    // Display locations in list and on map
    function displayLocations(locations: any[], skipMapAdjustment: boolean = false) {
      const locationList = document.getElementById('location-list');
      if (!locationList) return;
      
      // Clear existing markers
      labMarkers.forEach(marker => marker.remove());
      labMarkers = [];
      
      if (locations.length === 0) {
        locationList.innerHTML = `
          <div class="alert">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="stroke-info shrink-0 w-6 h-6"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
            <span>No locations found in this area.</span>
          </div>
        `;
        return;
      }
      
      // Display location cards
      locationList.innerHTML = locations.map((loc, index) => `
        <div class="card card-compact bg-base-200 cursor-pointer hover:shadow-lg transition-shadow location-card" data-index="${index}">
          <div class="card-body py-3 px-4">
            <div class="flex justify-between items-start">
              <h3 class="font-semibold text-base">${loc.name}</h3>
              <span class="text-sm text-gray-500 ml-2">${loc.distance || ''}</span>
            </div>
            <p class="text-sm text-gray-600 leading-tight">${loc.address}</p>
            ${loc.nextAvailable 
              ? `<p class="text-sm text-gray-600 leading-tight">Next: ${new Date(loc.nextAvailable).toLocaleDateString()}</p>`
              : ''
            }
          </div>
        </div>
      `).join('');
      
      // Add markers to map
      locations.forEach((loc, index) => {
        const marker = new mapboxgl.Marker({ color: '#DC2626' })
          .setLngLat([loc.longitude, loc.latitude])
          .setPopup(new mapboxgl.Popup().setHTML(`
            <div class="p-2">
              <div class="font-semibold">${loc.name}</div>
              <div class="text-sm">${loc.address}</div>
            </div>
          `))
          .addTo(map);
        
        // Add click handler to marker
        marker.getElement().addEventListener('click', () => {
          selectLocation(index);
        });
        
        labMarkers.push(marker);
      });
      
      // Add click handlers to location cards
      document.querySelectorAll('.location-card').forEach(card => {
        card.addEventListener('click', () => {
          const index = parseInt(card.getAttribute('data-index') || '0');
          selectLocation(index);
        });
      });
      
      // Only fit bounds if not skipping map adjustment (e.g., when using Update Map button)
      if (!skipMapAdjustment && locations.length > 0) {
        const bounds = new mapboxgl.LngLatBounds();
        locations.forEach(loc => {
          bounds.extend([loc.longitude, loc.latitude]);
        });
        bounds.extend([userCoordinates.longitude, userCoordinates.latitude]);
        map.fitBounds(bounds, { padding: 50 });
      }
    }

    // Select a location
    function selectLocation(index: number) {
      selectedLocation = locations[index];
      if (!selectedLocation) return;
      
      // Update UI to show selection
      document.querySelectorAll('.location-card').forEach((card, i) => {
        if (i === index) {
          card.classList.add('bg-primary/10');
          card.classList.remove('bg-base-200');
        } else {
          card.classList.remove('bg-primary/10');
          card.classList.add('bg-base-200');
        }
      });
      
      // Selected location info removed - visual feedback now shown through background shading
      
      // Enable continue button
      const continueBtn = document.getElementById('continue-to-datetime') as HTMLButtonElement;
      if (continueBtn) {
        continueBtn.disabled = false;
      }
      
      // Jump to selected location instantly
      map.jumpTo({
        center: [selectedLocation.longitude, selectedLocation.latitude],
        zoom: 15
      });
    }

    // Removed updateSearchInfo function as search info display is no longer needed

    // Load date/time availability
    function loadDateTimeAvailability() {
      if (!selectedLocation || !selectedLocation.availability) return;
      
      const datePicker = document.getElementById('date-picker');
      const summaryLocationName = document.getElementById('summary-location-name');
      const summaryLocationAddress = document.getElementById('summary-location-address');
      
      // Show location info in Appointment Summary
      if (summaryLocationName) summaryLocationName.textContent = selectedLocation.name;
      if (summaryLocationAddress) summaryLocationAddress.textContent = selectedLocation.address;
      
      // Display available dates
      if (datePicker) {
        const dates = Object.keys(selectedLocation.availability).sort();
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        
        datePicker.innerHTML = dates.slice(0, 14).map(date => {
          const dateObj = new Date(date + 'T00:00:00');
          const dayName = dateObj.toLocaleDateString('en-US', { weekday: 'short' });
          const dayNum = dateObj.getDate();
          const isToday = dateObj.getTime() === today.getTime();
          
          return `
            <button class="btn btn-ghost border border-gray-200 date-btn hover:bg-base-200" data-date="${date}">
              <div class="text-xs">${dayName}</div>
              <div class="text-lg font-bold">${dayNum}</div>
              ${isToday ? '<div class="text-xs">Today</div>' : ''}
            </button>
          `;
        }).join('');
        
        // Add click handlers to date buttons
        document.querySelectorAll('.date-btn').forEach(btn => {
          btn.addEventListener('click', () => {
            const date = btn.getAttribute('data-date');
            if (date) selectDate(date);
          });
        });
        
        // Auto-select first date
        if (dates.length > 0) {
          selectDate(dates[0]);
        }
      }
    }

    // Select a date
    function selectDate(date: string) {
      selectedDate = date;
      
      // Update UI with background shading
      document.querySelectorAll('.date-btn').forEach(btn => {
        if (btn.getAttribute('data-date') === date) {
          btn.classList.add('bg-primary/10', 'border-primary');
          btn.classList.remove('btn-ghost', 'border-gray-200');
        } else {
          btn.classList.remove('bg-primary/10', 'border-primary');
          btn.classList.add('btn-ghost', 'border-gray-200');
        }
      });
      
      // Update summary
      const summaryDate = document.getElementById('summary-date');
      if (summaryDate) {
        const dateObj = new Date(date + 'T00:00:00');
        summaryDate.textContent = dateObj.toLocaleDateString('en-US', { 
          weekday: 'long', 
          month: 'long', 
          day: 'numeric', 
          year: 'numeric' 
        });
      }
      
      // Update date display
      const dateDisplay = document.getElementById('selected-date-display');
      if (dateDisplay) {
        const dateObj = new Date(date + 'T00:00:00');
        dateDisplay.textContent = `on ${dateObj.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}`;
      }
      
      // Load time slots for selected date
      loadTimeSlots(date);
    }

    // Load time slots for selected date
    function loadTimeSlots(date: string) {
      const timeSlotsContainer = document.getElementById('time-slots');
      if (!timeSlotsContainer || !selectedLocation || !selectedLocation.availability) return;
      
      const slots = selectedLocation.availability[date] || [];
      
      if (slots.length === 0) {
        timeSlotsContainer.innerHTML = `
          <div class="col-span-full alert">
            <span>No available time slots for this date.</span>
          </div>
        `;
        return;
      }
      
      // Display time slots
      timeSlotsContainer.innerHTML = slots.slice(0, 20).map((slot: any) => {
        const startTime = new Date(slot.start);
        const timeStr = startTime.toLocaleTimeString('en-US', { 
          hour: 'numeric', 
          minute: '2-digit',
          hour12: true 
        });
        
        return `
          <button class="btn btn-ghost border border-gray-200 btn-sm time-slot-btn hover:bg-base-200" data-slot-id="${slot.booking_key || slot.id}">
            ${timeStr}
          </button>
        `;
      }).join('');
      
      // Add click handlers to time slots
      document.querySelectorAll('.time-slot-btn').forEach(btn => {
        btn.addEventListener('click', () => {
          const slotId = btn.getAttribute('data-slot-id');
          const slot = slots.find((s: any) => (s.booking_key || s.id) === slotId);
          if (slot) selectTimeSlot(slot, btn);
        });
      });
    }

    // Select a time slot
    function selectTimeSlot(slot: any, buttonElement: Element) {
      selectedTimeSlot = slot;
      
      // Update UI with consistent selection styling
      document.querySelectorAll('.time-slot-btn').forEach(btn => {
        if (btn === buttonElement) {
          btn.classList.add('bg-primary/10', 'border-primary');
          btn.classList.remove('btn-ghost', 'border-gray-200');
        } else {
          btn.classList.remove('bg-primary/10', 'border-primary');
          btn.classList.add('btn-ghost', 'border-gray-200');
        }
      });
      
      // Update summary
      const summaryTime = document.getElementById('summary-time');
      if (summaryTime) {
        const startTime = new Date(slot.start);
        summaryTime.textContent = startTime.toLocaleTimeString('en-US', { 
          hour: 'numeric', 
          minute: '2-digit',
          hour12: true 
        });
      }
      
      // Enable confirm button
      const confirmBtn = document.getElementById('confirm-appointment') as HTMLButtonElement;
      if (confirmBtn) {
        confirmBtn.disabled = false;
      }
    }

    // Add search input listener for live suggestions
    const searchInput = document.getElementById('location-search') as HTMLInputElement;
    const searchLoading = document.getElementById('search-loading');
    const searchSuggestions = document.getElementById('search-suggestions');
    let selectedSuggestionIndex = -1;
    
    if (searchInput) {
      // Handle keyboard navigation
      searchInput.addEventListener('keydown', (e) => {
        const suggestions = searchSuggestions?.querySelectorAll('.suggestion-item');
        if (!suggestions || suggestions.length === 0) return;
        
        if (e.key === 'ArrowDown') {
          e.preventDefault();
          selectedSuggestionIndex = Math.min(selectedSuggestionIndex + 1, suggestions.length - 1);
          updateSuggestionHighlight(suggestions);
        } else if (e.key === 'ArrowUp') {
          e.preventDefault();
          selectedSuggestionIndex = Math.max(selectedSuggestionIndex - 1, -1);
          updateSuggestionHighlight(suggestions);
        } else if (e.key === 'Enter') {
          e.preventDefault();
          if (selectedSuggestionIndex >= 0 && selectedSuggestionIndex < suggestions.length) {
            (suggestions[selectedSuggestionIndex] as HTMLElement).click();
          } else {
            document.getElementById('search-btn')?.click();
          }
          searchInput.blur(); // Remove focus after selection
        } else if (e.key === 'Escape') {
          searchSuggestions?.classList.add('hidden');
          selectedSuggestionIndex = -1;
        }
      });
      
      function updateSuggestionHighlight(suggestions: NodeListOf<Element>) {
        suggestions.forEach((item, index) => {
          if (index === selectedSuggestionIndex) {
            item.classList.add('bg-base-200');
          } else {
            item.classList.remove('bg-base-200');
          }
        });
      }
      
      searchInput.addEventListener('input', () => {
        clearTimeout(searchTimeout);
        searchController?.abort();
        selectedSuggestionIndex = -1; // Reset selection on new input
        
        const query = searchInput.value.trim();
        
        if (query.length < 3) {
          if (searchSuggestions) {
            searchSuggestions.classList.add('hidden');
          }
          return;
        }
        
        // Show loading spinner
        if (searchLoading) {
          searchLoading.classList.remove('hidden');
        }
        
        searchTimeout = setTimeout(async () => {
          searchController = new AbortController();
          
          try {
            const response = await fetch(
              `https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(query)}.json?` +
              `access_token=${mapboxgl.accessToken}&country=us&types=place,address,postcode,locality,neighborhood&limit=5`,
              { signal: searchController.signal }
            );
            
            if (!response.ok) throw new Error('Search failed');
            
            const data = await response.json();
            
            if (searchSuggestions && data.features && data.features.length > 0) {
              searchSuggestions.innerHTML = data.features.map((feature: any) => `
                <div class="suggestion-item px-4 py-2 hover:bg-base-200 cursor-pointer flex items-start gap-2" data-place='${JSON.stringify(feature)}'>
                  <svg class="w-4 h-4 mt-1 flex-shrink-0 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                  </svg>
                  <span class="text-sm">${feature.place_name}</span>
                </div>
              `).join('');
              
              searchSuggestions.classList.remove('hidden');
              
              // Add click handlers to suggestions
              searchSuggestions?.querySelectorAll('.suggestion-item').forEach(item => {
                item.addEventListener('click', async () => {
                  const place = JSON.parse(item.getAttribute('data-place') || '{}');
                  if (place.center) {
                    const [lng, lat] = place.center;
                    
                    // Update search input
                    searchInput.value = place.place_name;
                    searchSuggestions?.classList.add('hidden');
                    searchInput.blur(); // Remove focus after selection
                    
                    // Jump to location first
                    map.jumpTo({
                      center: [lng, lat],
                      zoom: 10
                    });
                    
                    // Update coordinates
                    userCoordinates = { latitude: lat, longitude: lng };
                    
                    // Get ZIP code for this location and fetch labs
                    try {
                      const response = await fetch(
                        `https://api.mapbox.com/geocoding/v5/mapbox.places/${lng},${lat}.json?` +
                        `access_token=${mapboxgl.accessToken}&types=postcode&limit=1`
                      );
                      
                      if (response.ok) {
                        const data = await response.json();
                        
                        if (data.features && data.features.length > 0) {
                          const zipCode = data.features[0].text;
                          await fetchLabLocations(zipCode, place.place_name, true);
                        } else {
                          await fetchLabLocations(undefined, place.place_name, true);
                        }
                      } else {
                        await fetchLabLocations(undefined, place.place_name, true);
                      }
                    } catch (error) {
                      console.error('Error getting ZIP for suggestion:', error);
                      await fetchLabLocations(undefined, place.place_name, true);
                    }
                  }
                });
              });
            } else {
              searchSuggestions?.classList.add('hidden');
            }
          } catch (error: any) {
            if (error.name !== 'AbortError') {
              console.error('Search error:', error);
            }
            if (searchSuggestions) {
              searchSuggestions.classList.add('hidden');
            }
          } finally {
            if (searchLoading) {
              searchLoading.classList.add('hidden');
            }
          }
        }, 300);
      });
      
      // Hide suggestions when clicking outside
      document.addEventListener('click', (e) => {
        if (!searchInput.contains(e.target as Node) && !searchSuggestions?.contains(e.target as Node)) {
          searchSuggestions?.classList.add('hidden');
        }
      });
      
      // Enter key is now handled in the keydown event above
    }
    
    // Event Listeners
    
    // Search button
    document.getElementById('search-btn')?.addEventListener('click', async () => {
      const input = document.getElementById('location-search') as HTMLInputElement;
      if (input && input.value.trim()) {
        const searchValue = input.value.trim();
        input.blur(); // Remove focus after search
        
        // Check if it's a ZIP code
        if (/^\d{5}$/.test(searchValue)) {
          await fetchLabLocations(searchValue, searchValue);
        } else {
          // Use Mapbox geocoding for address search
          try {
            const response = await fetch(
              `https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(searchValue)}.json?` +
              `access_token=${mapboxgl.accessToken}&country=us&types=place,address,postcode,locality,neighborhood&limit=5`
            );
            
            if (!response.ok) {
              throw new Error('Geocoding failed');
            }
            
            const data = await response.json();
            
            if (data.features && data.features.length > 0) {
              const firstResult = data.features[0];
              const [lng, lat] = firstResult.center;
              
              // Jump to searched location instantly (no animation)
              map.jumpTo({
                center: [lng, lat],
                zoom: 10
              });
              
              // Update coordinates
              userCoordinates = { latitude: lat, longitude: lng };
              
              // Then use the same logic as Update Map button to get ZIP and fetch locations
              try {
                const response = await fetch(
                  `https://api.mapbox.com/geocoding/v5/mapbox.places/${lng},${lat}.json?` +
                  `access_token=${mapboxgl.accessToken}&types=postcode&limit=1`
                );
                
                if (response.ok) {
                  const data = await response.json();
                  
                  if (data.features && data.features.length > 0) {
                    const zipCode = data.features[0].text;
                    // Don't re-center map since we already jumped there
                    await fetchLabLocations(zipCode, firstResult.place_name, true);
                  } else {
                    await fetchLabLocations(undefined, firstResult.place_name, true);
                  }
                } else {
                  await fetchLabLocations(undefined, firstResult.place_name, true);
                }
              } catch (error) {
                console.error('Error getting ZIP for searched location:', error);
                await fetchLabLocations(undefined, firstResult.place_name, true);
              }
            } else {
              // No results found
              const locationList = document.getElementById('location-list');
              if (locationList) {
                locationList.innerHTML = `
                  <div class="alert alert-warning">
                    <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" /></svg>
                    <span>No locations found for "${searchValue}". Try a different search.</span>
                  </div>
                `;
              }
            }
          } catch (error) {
            console.error('Geocoding error:', error);
            await fetchLabLocations(undefined, searchValue);
          }
        }
      }
    });

    // Manual ZIP code update removed as it's redundant

    // Clear search button removed as search info is no longer displayed

    // Update map button - refresh locations based on current map center
    document.getElementById('update-map')?.addEventListener('click', async () => {
      const center = map.getCenter();
      
      try {
        // First, get the ZIP code for the new coordinates using Mapbox reverse geocoding
        const response = await fetch(
          `https://api.mapbox.com/geocoding/v5/mapbox.places/${center.lng},${center.lat}.json?` +
          `access_token=${mapboxgl.accessToken}&types=postcode&limit=1`
        );
        
        if (response.ok) {
          const data = await response.json();
          
          if (data.features && data.features.length > 0) {
            // Extract ZIP code from the result
            const zipCode = data.features[0].text;
            
            // Update coordinates and fetch locations for this ZIP
            userCoordinates = { latitude: center.lat, longitude: center.lng };
            await fetchLabLocations(zipCode, `Map center (${zipCode})`, true);
          } else {
            // If no ZIP found, use coordinates directly
            userCoordinates = { latitude: center.lat, longitude: center.lng };
            await fetchLabLocations(undefined, undefined, true);
          }
        } else {
          // Fallback to coordinates if geocoding fails
          userCoordinates = { latitude: center.lat, longitude: center.lng };
          await fetchLabLocations(undefined, undefined, true);
        }
      } catch (error) {
        console.error('Error getting ZIP for map center:', error);
        // Fallback to coordinates
        userCoordinates = { latitude: center.lat, longitude: center.lng };
        await fetchLabLocations(undefined, undefined, true);
      }
    });

    // Continue to date/time selection
    document.getElementById('continue-to-datetime')?.addEventListener('click', () => {
      if (selectedLocation) {
        showStep('datetime');
        loadDateTimeAvailability();
      }
    });

    // Back to location selection
    document.getElementById('back-to-location')?.addEventListener('click', () => {
      showStep('location');
    });

    // Change location button removed - use Back to Location Selection button instead

    // Select appointment and return to tests page
    document.getElementById('confirm-appointment')?.addEventListener('click', () => {
      if (selectedLocation && selectedDate && selectedTimeSlot) {
        // Store appointment details
        const appointmentDetails = {
          location: selectedLocation,
          date: selectedDate,
          time: selectedTimeSlot,
          bookingKey: selectedTimeSlot.booking_key || selectedTimeSlot.id
        };
        
        sessionStorage.setItem('selectedAppointment', JSON.stringify(appointmentDetails));
        
        // Dispatch appointment updated event
        window.dispatchEvent(new Event('appointmentUpdated'));
        
        // Set flag to open cart drawer
        sessionStorage.setItem('openCartDrawer', 'true');
        
        // Navigate back to tests page
        window.location.href = '/tests';
      }
    });

    // Remove automatic update on map movement - user will use Update Map button instead

    // Initial load
    fetchLabLocations();
  });
</script>

<style>
  .loading-skeleton {
    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }
  
  @keyframes pulse {
    0%, 100% {
      opacity: 1;
    }
    50% {
      opacity: .5;
    }
  }
  
  .location-card.ring-2 {
    border-color: hsl(var(--p));
  }
  
  /* Custom map marker styles */
  .mapboxgl-popup-content {
    padding: 10px;
    border-radius: 8px;
  }
  
  /* Search suggestions dropdown */
  #search-suggestions {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    margin-top: 4px;
    z-index: 50;
  }
  
  .suggestion-item:hover {
    background-color: hsl(var(--b2));
  }
  
  /* Responsive adjustments */
  @media (max-width: 768px) {
    #map {
      height: 300px;
    }
    
    #location-list {
      max-height: 400px;
    }
  }
</style>